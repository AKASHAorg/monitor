{"version":3,"sources":["../index.js"],"names":["settings","require","Table","logsConnection","lastRecord","length","count","currentBlock","fromBlock","tail","rows","connect","draw","t2","borderStyle","paddingBottom","headerAlign","align","str2","render","console","log","run","factory","Class","get","web3API","watcher","objects","registry","Register","toBlock","watch","err","registered","blockNumber","profile","classes","Profile","at","args","_hash","call","err0","firstPart","err1","secondPart","resource","getIpfs","ipfsAPI","object","errFinal","data","push","toUtf8","id","JSON","stringify","setTimeout","writeToSettings","code","newData","__dirname","process","exit","on"],"mappings":"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","file":"index.js","sourcesContent":["import connection from './connection.service';\nimport contracts from '@akashaproject/contracts.js';\nimport { writeFileSync } from 'fs';\nimport { headerProfile } from './header';\nimport debounce from 'lodash.debounce';\nconst settings = require('./settings.json');\nconst Table = require('tty-table');\n\nconst logsConnection = connection();\nconst lastRecord = settings[settings.length - 1];\nlet count = lastRecord.count;\nlet currentBlock = lastRecord.fromBlock;\nconst tail = () => {\n    let rows = [];\n    logsConnection.connect('tail');\n    const draw = debounce(() => {\n        const t2 = Table(headerProfile,rows,{\n            borderStyle : 1,\n            paddingBottom : 0,\n            headerAlign : \"center\",\n            align : \"center\"\n        });\n\n        const str2 = t2.render();\n        console.log(str2);\n        rows = [];\n    }, 8000);\n    const run = () => {\n        const factory = new contracts.Class(logsConnection.get().web3API);\n        const watcher = factory.objects.registry.Register({}, {fromBlock: lastRecord.fromBlock, toBlock: 'latest'});\n        watcher.watch((err, registered) => {\n            currentBlock = registered.blockNumber;\n            let profile = factory.classes.Profile.at(registered.args.profile);\n            profile._hash.call(0, (err0, firstPart) => {\n                profile._hash.call(1, (err1, secondPart) => {\n                    if (!err0 && !err1) {\n                        const resource = logsConnection.getIpfs([firstPart, secondPart]);\n                        logsConnection.get().ipfsAPI.object.get(resource, (errFinal, data) => {\n                            rows.push([\n                                logsConnection.get().web3API.toUtf8(registered.args.id),\n                                registered.args.profile,\n                                resource,\n                                JSON.stringify(data.data),\n                                count\n                            ]);\n                            draw();\n                            count++;\n                        });\n                    }\n                })\n            });\n        });\n    };\n    setTimeout(run, 2000);\n};\n\ntail();\nconst writeToSettings = (code) => {\n    settings.push({fromBlock: currentBlock, count: count});\n    const newData = JSON.stringify(settings);\n    writeFileSync(__dirname + '/settings.json', newData);\n    process.exit();\n};\n\nprocess.on('SIGTERM', writeToSettings);\nprocess.on('SIGINT', writeToSettings);\n\n\n"]}