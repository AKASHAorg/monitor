{"version":3,"sources":["../index.js"],"names":["settings","require","Table","logsConnection","lastRecord","length","count","currentBlock","fromBlock","tail","rows","connect","draw","t2","borderStyle","paddingBottom","headerAlign","align","str2","render","console","log","run","factory","Class","get","web3API","watcher","objects","registry","Register","toBlock","eth","defaultAccount","process","env","BOT_ADDR","watch","err","registered","blockNumber","profile","classes","Profile","at","args","reqFollow","feed","follow","request","id","gas","_hash","call","err0","firstPart","err1","secondPart","resource","getIpfs","ipfsAPI","object","errFinal","data","push","toUtf8","JSON","stringify","setTimeout","writeToSettings","code","newData","__dirname","exit","on"],"mappings":"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","file":"index.js","sourcesContent":["import connection from './connection.service';\nimport contracts from '@akashaproject/contracts.js';\nimport { writeFileSync } from 'fs';\nimport { headerProfile } from './header';\nimport debounce from 'lodash.debounce';\nconst settings = require('./settings.json');\nconst Table = require('tty-table');\n\nconst logsConnection = connection();\nconst lastRecord = settings[settings.length - 1];\nlet count = lastRecord.count;\nlet currentBlock = lastRecord.fromBlock;\nconst tail = () => {\n    let rows = [];\n    logsConnection.connect('tail');\n    const draw = debounce(() => {\n        const t2 = Table(headerProfile,rows,{\n            borderStyle : 1,\n            paddingBottom : 0,\n            headerAlign : \"center\",\n            align : \"center\"\n        });\n\n        const str2 = t2.render();\n        console.log(str2);\n        rows = [];\n    }, 8000);\n    const run = () => {\n        const factory = new contracts.Class(logsConnection.get().web3API);\n        const watcher = factory.objects.registry.Register({}, {fromBlock: lastRecord.fromBlock, toBlock: 'latest'});\n        logsConnection.get().web3API.eth.defaultAccount = (process.env.BOT_ADDR) ? process.env.BOT_ADDR: '0xd06a3090ae7c17970dd785bce846c13a98e9f43b';\n        watcher.watch((err, registered) => {\n            currentBlock = registered.blockNumber;\n            let profile = factory.classes.Profile.at(registered.args.profile);\n            const reqFollow = factory.objects.feed.follow.request(registered.args.id, {gas: 500000}); //reqFollow.params[0]\n            profile._hash.call(0, (err0, firstPart) => {\n                profile._hash.call(1, (err1, secondPart) => {\n\n                    /*logsConnection.get().web3API\n                        .personal\n                        .sendTransaction(reqFollow.params[0], (process.env.BOT_PWD) ? process.env.BOT_PWD: '^ItA&TT$QQbj', (err, data) =>{\n                            console.log('tx for following ', registered.args.id, err, data);\n                        });\n                        */\n                    if (!err0 && !err1) {\n                        const resource = logsConnection.getIpfs([firstPart, secondPart]);\n                        console.log(resource, registered.args.profile);\n                        logsConnection.get().ipfsAPI.object.get(resource, (errFinal, data) => {\n                            if(!errFinal){\n                                rows.push([\n                                    logsConnection.get().web3API.toUtf8(registered.args.id),\n                                    registered.args.profile,\n                                    resource,\n                                    JSON.stringify(data.data),\n                                    count\n                                ]);\n                                draw();\n                                count++;\n                            }else{\n                                console.log('error ', errFinal, logsConnection.get().web3API.toUtf8(registered.args.id));\n                            }\n\n                        });\n                    }\n                })\n            });\n        });\n    };\n    setTimeout(run, 2000);\n};\n\ntail();\nconst writeToSettings = (code) => {\n    settings.push({fromBlock: currentBlock, count: count});\n    const newData = JSON.stringify(settings);\n    writeFileSync(__dirname + '/settings.json', newData);\n    process.exit();\n};\n\nprocess.on('SIGTERM', writeToSettings);\nprocess.on('SIGINT', writeToSettings);\n\n\n"]}