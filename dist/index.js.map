{"version":3,"sources":["../index.js"],"names":["Table","require","logsConnection","userTable","head","tail","count","connect","run","factory","Class","get","web3API","watcher","objects","registry","Register","watch","err","registered","profile","classes","Profile","at","args","console","log","toString","_hash","call","err0","firstPart","err1","secondPart","resource","getIpfs","ipfsAPI","object","errFinal","data","push","id","JSON","stringify","setTimeout"],"mappings":";;AAAA;;;;AACA;;;;;;AACA,IAAMA,QAAQC,QAAQ,gCAAR,CAAd;;AAEA,IAAMC,iBAAiB,2BAAvB;AACA;AACA,IAAMC,YAAY,IAAIH,KAAJ,CAAU;AACxBI,UAAM,CAAC,IAAD,EAAO,UAAP,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C,eAA5C;AADkB,CAAV,CAAlB;;AAIA,IAAMC,OAAO,SAAPA,IAAO,GAAM;AACf,QAAIC,QAAQ,CAAZ;AACAJ,mBAAeK,OAAf,CAAuB,MAAvB;AACA,QAAMC,MAAM,SAANA,GAAM,GAAM;AACd,YAAMC,UAAU,IAAI,oBAAUC,KAAd,CAAoBR,eAAeS,GAAf,GAAqBC,OAAzC,CAAhB;AACA,YAAMC,UAAUJ,QAAQK,OAAR,CAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC,EAAlC,EAAsC,EAAtC,CAAhB;AACAH,gBAAQI,KAAR,CAAc,UAACC,GAAD,EAAMC,UAAN,EAAqB;AAC/B,gBAAIC,UAAUX,QAAQY,OAAR,CAAgBC,OAAhB,CAAwBC,EAAxB,CAA2BJ,WAAWK,IAAX,CAAgBJ,OAA3C,CAAd;AACAK,oBAAQC,GAAR,CAAYvB,UAAUwB,QAAV,EAAZ;AACAP,oBAAQQ,KAAR,CAAcC,IAAd,CAAmB,CAAnB,EAAsB,UAACC,IAAD,EAAOC,SAAP,EAAqB;AACvCX,wBAAQQ,KAAR,CAAcC,IAAd,CAAmB,CAAnB,EAAsB,UAACG,IAAD,EAAOC,UAAP,EAAsB;AACxC,wBAAI,CAACH,IAAD,IAAS,CAACE,IAAd,EAAoB;AAAA;AAChB,gCAAME,WAAWhC,eAAeiC,OAAf,CAAuB,CAACJ,SAAD,EAAYE,UAAZ,CAAvB,CAAjB;AACA/B,2CAAeS,GAAf,GAAqByB,OAArB,CAA6BC,MAA7B,CAAoC1B,GAApC,CAAwCuB,QAAxC,EAAkD,UAACI,QAAD,EAAWC,IAAX,EAAoB;AAClEpC,0CAAUqC,IAAV,CAAe,CACXrB,WAAWK,IAAX,CAAgBiB,EADL,EAEXtB,WAAWK,IAAX,CAAgBJ,OAFL,EAGXc,QAHW,EAIXQ,KAAKC,SAAL,CAAeJ,IAAf,CAJW,EAKXD,QALW,EAMXhC,KANW,CAAf;AAQH,6BATD;AAFgB;AAYnB;AACJ,iBAdD;AAeH,aAhBD;AAiBH,SApBD;AAqBH,KAxBD;AAyBAsC,eAAWpC,GAAX,EAAgB,IAAhB;AACH,CA7BD;;AA+BAH","file":"index.js","sourcesContent":["import connection from './connection.service';\nimport contracts from '@akashaproject/contracts.js';\nconst Table = require('tty-table/automattic-cli-table');\n\nconst logsConnection = connection();\n/* col widths */\nconst userTable = new Table({\n    head: ['ID', 'Contract', 'Hash', 'Data', 'Error', 'Total Watched']\n});\n\nconst tail = () => {\n    let count = 1;\n    logsConnection.connect('tail');\n    const run = () => {\n        const factory = new contracts.Class(logsConnection.get().web3API);\n        const watcher = factory.objects.registry.Register({}, {});\n        watcher.watch((err, registered) => {\n            let profile = factory.classes.Profile.at(registered.args.profile);\n            console.log(userTable.toString());\n            profile._hash.call(0, (err0, firstPart) => {\n                profile._hash.call(1, (err1, secondPart) => {\n                    if (!err0 && !err1) {\n                        const resource = logsConnection.getIpfs([firstPart, secondPart]);\n                        logsConnection.get().ipfsAPI.object.get(resource, (errFinal, data) => {\n                            userTable.push([\n                                registered.args.id,\n                                registered.args.profile,\n                                resource,\n                                JSON.stringify(data),\n                                errFinal,\n                                count\n                            ])\n                        });\n                    }\n                })\n            });\n        });\n    };\n    setTimeout(run, 2000);\n};\n\ntail();\n\n\n\n"]}