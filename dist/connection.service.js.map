{"version":3,"sources":["../connection.service.js"],"names":["_web3API","_ipfsAPI","_connectWeb3","web3","socket","Socket","ipcPath","process","env","GETH_IPC_PATH","setTimeout","setEncoding","setProvider","providers","IpcProvider","_connectIpfs","ipfsApiPath","IPFS_API_ADDRESS","get","web3API","ipfsAPI","connect","service","getIpfs","ipfsHashChunks","toUtf8"],"mappings":";;;;;;kBAKe,YAAY;AACvB,QAAIA,WAAW,IAAf;AACA,QAAIC,WAAW,IAAf;;AAEA,QAAMC,eAAe,SAAfA,YAAe,GAAM;AACvB,YAAMC,OAAO,mBAAb;AACA,YAAMC,SAAS,IAAI,cAAIC,MAAR,EAAf;AACA,YAAMC,UAAUC,QAAQC,GAAR,CAAYC,aAA5B;AACAL,eAAOM,UAAP,CAAkB,CAAlB;AACAN,eAAOO,WAAP,CAAmB,MAAnB;AACAR,aAAKS,WAAL,CAAiB,IAAI,cAAKC,SAAL,CAAeC,WAAnB,CAA+BR,OAA/B,EAAwCF,MAAxC,CAAjB;AACAJ,mBAAWG,IAAX;AACH,KARD;;AAUA,QAAMY,eAAe,SAAfA,YAAe,GAAM;AACvB,YAAMC,cAAeT,QAAQC,GAAR,CAAYS,gBAAb,GAAiCV,QAAQC,GAAR,CAAYS,gBAA7C,GAAgE,yBAApF;AACAhB,mBAAW,uBAAQe,WAAR,CAAX;AACH,KAHD;;AAKA,QAAME,MAAM,SAANA,GAAM,GAAM;AACd,eAAO,EAAEC,SAASnB,QAAX,EAAqBoB,SAASnB,QAA9B,EAAP;AACH,KAFD;AAGA,QAAMoB,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAa;AACzBpB;AACAa;AACH,KAHD;;AAKA,QAAMQ,UAAU,SAAVA,OAAU,CAACC,cAAD,EAAoB;AAChC,eAAOxB,SAASyB,MAAT,CAAgBD,eAAe,CAAf,CAAhB,IACHxB,SAASyB,MAAT,CAAgBD,eAAe,CAAf,CAAhB,CADJ;AAEH,KAHD;AAIA,WAAO,EAAEN,QAAF,EAAOG,gBAAP,EAAgBE,gBAAhB,EAAP;AACH,C;;AArCD;;;;AACA;;;;AACA","file":"connection.service.js","sourcesContent":["import Web3 from 'web3';\nimport net from 'net';\nimport ipfsAPI from 'ipfs-api';\n\n\nexport default function () {\n    let _web3API = null;\n    let _ipfsAPI = null;\n\n    const _connectWeb3 = () => {\n        const web3 = new Web3();\n        const socket = new net.Socket();\n        const ipcPath = process.env.GETH_IPC_PATH;\n        socket.setTimeout(0);\n        socket.setEncoding('utf8');\n        web3.setProvider(new Web3.providers.IpcProvider(ipcPath, socket));\n        _web3API = web3;\n    };\n\n    const _connectIpfs = () => {\n        const ipfsApiPath = (process.env.IPFS_API_ADDRESS) ? process.env.IPFS_API_ADDRESS : '/ip4/127.0.0.1/tcp/5001';\n        _ipfsAPI = ipfsAPI(ipfsApiPath);\n    };\n\n    const get = () => {\n        return { web3API: _web3API, ipfsAPI: _ipfsAPI }\n    };\n    const connect = (service) => {\n        _connectWeb3();\n        _connectIpfs();\n    };\n\n    const getIpfs = (ipfsHashChunks) => {\n        return _web3API.toUtf8(ipfsHashChunks[0]) +\n            _web3API.toUtf8(ipfsHashChunks[1]);\n    };\n    return { get, connect, getIpfs };\n}"]}