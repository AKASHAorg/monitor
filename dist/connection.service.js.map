{"version":3,"sources":["../connection.service.js"],"names":["_web3API","_ipfsAPI","_connectWeb3","web3","socket","Socket","ipcPath","process","env","GETH_IPC_PATH","setTimeout","setEncoding","setProvider","providers","IpcProvider","table","push","_connectIpfs","ipfsApiPath","IPFS_API_ADDRESS","get","web3API","ipfsAPI","connect","service","console","log","toString","getIpfs","ipfsHashChunks","toUtf8","Table","require","chalk","head"],"mappings":";;;;;;kBAUe,YAAY;AACvB,QAAIA,WAAW,IAAf;AACA,QAAIC,WAAW,IAAf;AACA,QAAMC,eAAe,SAAfA,YAAe,GAAM;AACvB,YAAMC,OAAO,mBAAb;AACA,YAAMC,SAAS,IAAI,cAAIC,MAAR,EAAf;AACA,YAAMC,UAAUC,QAAQC,GAAR,CAAYC,aAA5B;AACAL,eAAOM,UAAP,CAAkB,CAAlB;AACAN,eAAOO,WAAP,CAAmB,MAAnB;AACAR,aAAKS,WAAL,CAAiB,IAAI,cAAKC,SAAL,CAAeC,WAAnB,CAA+BR,OAA/B,EAAwCF,MAAxC,CAAjB;AACAJ,mBAAWG,IAAX;AACAY,cAAMC,IAAN,CAAW,CAAC,MAAD,EAAS,IAAT,CAAX;AACH,KATD;;AAWA,QAAMC,eAAe,SAAfA,YAAe,GAAM;AACvB,YAAMC,cAAeX,QAAQC,GAAR,CAAYW,gBAAb,GAAiCZ,QAAQC,GAAR,CAAYW,gBAA7C,GAAgE,yBAApF;AACAlB,mBAAW,uBAAQiB,WAAR,CAAX;AACAH,cAAMC,IAAN,CAAW,CAAC,MAAD,EAAS,IAAT,CAAX;AACH,KAJD;AAKA,QAAMI,MAAM,SAANA,GAAM,GAAM;AACd,eAAO,EAAEC,SAASrB,QAAX,EAAqBsB,SAASrB,QAA9B,EAAP;AACH,KAFD;AAGA,QAAMsB,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAa;AACzBtB;AACAe;AACAQ,gBAAQC,GAAR,CAAYX,MAAMY,QAAN,EAAZ;AACH,KAJD;AAKA,QAAMC,UAAU,SAAVA,OAAU,CAACC,cAAD,EAAoB;AAChC,eAAO7B,SAAS8B,MAAT,CAAgBD,eAAe,CAAf,CAAhB,IACH7B,SAAS8B,MAAT,CAAgBD,eAAe,CAAf,CAAhB,CADJ;AAEH,KAHD;AAIA,WAAO,EAAET,QAAF,EAAOG,gBAAP,EAAgBK,gBAAhB,EAAP;AACH,C;;AA1CD;;;;AACA;;;;AACA;;;;;;AACA,IAAMG,QAAQC,QAAQ,gCAAR,CAAd;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;;AAEA,IAAMjB,QAAQ,IAAIgB,KAAJ,CAAU;AACpBG,UAAM,CAAC,SAAD,EAAY,QAAZ;AADc,CAAV,CAAd","file":"connection.service.js","sourcesContent":["import Web3 from 'web3';\nimport net from 'net';\nimport ipfsAPI from 'ipfs-api';\nconst Table = require('tty-table/automattic-cli-table');\nconst chalk = require('chalk');\n\nconst table = new Table({\n    head: ['Service', 'Status']\n});\n\nexport default function () {\n    let _web3API = null;\n    let _ipfsAPI = null;\n    const _connectWeb3 = () => {\n        const web3 = new Web3();\n        const socket = new net.Socket();\n        const ipcPath = process.env.GETH_IPC_PATH;\n        socket.setTimeout(0);\n        socket.setEncoding('utf8');\n        web3.setProvider(new Web3.providers.IpcProvider(ipcPath, socket));\n        _web3API = web3;\n        table.push(['GETH', 'OK']);\n    };\n\n    const _connectIpfs = () => {\n        const ipfsApiPath = (process.env.IPFS_API_ADDRESS) ? process.env.IPFS_API_ADDRESS : '/ip4/127.0.0.1/tcp/5001';\n        _ipfsAPI = ipfsAPI(ipfsApiPath);\n        table.push(['IPFS', 'OK']);\n    };\n    const get = () => {\n        return { web3API: _web3API, ipfsAPI: _ipfsAPI }\n    };\n    const connect = (service) => {\n        _connectWeb3();\n        _connectIpfs();\n        console.log(table.toString());\n    };\n    const getIpfs = (ipfsHashChunks) => {\n        return _web3API.toUtf8(ipfsHashChunks[0]) +\n            _web3API.toUtf8(ipfsHashChunks[1]);\n    };\n    return { get, connect, getIpfs };\n}"]}